alias lsp="ls | peco --exec 'tmux set-buffer "$1"'"
apt-c(){
apt-cache search "$1" | peco --exec 'xargs -n 1 sudo aptitude install -y $1'
}
alias rmf='sudo rm -rf '
alias xx="chmod +x"
alias _="sudo"
alias gethome="source /usr/games/gethomepc"
alias ygu="yarn global upgrade-interactive"
alias ygr="yarn global remove"
alias ygl="yarn global list"
alias yga="yarn global add"
git(){
  case "$1" in clone) git-clone "${@:2}";; *) command git "$@";; esac
}
git-clone(){
   local tgt
   tgt=$(command git clone "$@" 2> >(tee /dev/stderr |head -n1 | cut -d \' -f2)) || return $?
   cd "$tgt"
}
alias gc='git clone'
alias pomo='muccadoro | tee -ai ~/pomodoros.txt'
alias renamer="qmv --format=destination-only"
docker-enter() { docker exec -it "$@" /bin/bash ||  docker exec -it "$@" /bin/sh; }
shorten() { curl -f -s 'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyCBs55kbWyVZeQhdV9FdI-0H_Vd8kMP0_g' -H 'Content-Type: application/json' -d "{'longUrl': '$1'}" | awk '/id/ { printf $2}' | awk -F\" '{ printf $2 }' ; }
gcl_port_set() { gcloud compute firewall-rules update port8200 --allow=tcp:"$@"; }
alias gcl_port_get='gcloud compute firewall-rules describe port8200'
alias suu='sudo -s'	
alias md5-pw='echo -n '$1' | md5sum -'
alias pw-gen='date | md5sum'
alias sreboot='sudo fdesetup authrestart'
alias tmu='tmux attach -t0'
alias listmp3='find -name "*.mp3" -exec mp3info {} -p "%F: %r kbps\n" \; | sort | sed "/96 kbps/d"'
alias sano='sudo nano'
alias sumount='sudo umount'
alias lsl='ls -lah'
alias psg='ps aux | grep'
alias slog='tail -f /var/log/syslog'
alias rl_apache='sudo service apache restart'
alias filebot='/usr/filebot/filebot.sh'
alias kick='tmux detach -a'
alias reboot='sudo reboot'
alias suser='sudo service'
alias apk='sudo apk'
alias untar="tar -xvf"
alias _chown='sudo chown -R lukas '
alias _chmod='sudo chmod -R 777 '
alias rss='automatic -f -o'
alias ssx='export DISPLAY=:0; ssh -C -X -c aes128-ctr'
alias rsyncfast='rsync -rv —progress —size-only -e "ssh -c arcfour" '
alias rsyncwebdav='/usr/bin/rsync —size-only —no-whole-file —inplace —bwlimit=250 -rv —progress'
alias suw='cd /var/www; sudo su www-data'
alias dco='docker-compose'
alias chown-dl="sudo chown -R lukas:lukas /home/lukas/Downloads"
alias chown-docker="sudo chown -R lukas:lukas /home/lsudo ukas/docker*"
alias apt-u="sudo apt-get update"
alias saptitude='sudo aptitude'
alias apt-i='sudo aptitude install'
alias apt-add-key="sudo apt-key adv --keyserver hkp://keys.gnupg.net --recv-keys"
alias apt-u="sudo aptitude update; sudo aptitude upgrade; npm-check -gu; yarn global upgrade-interactive"
alias apt-d='apt list —installed | grep $1'
# FUNCTIONS

#transfer
function transfer() { if [ $# -eq 0 ]; then echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl —progress-bar —upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile | ssh $homepc pbcopy | sleep 1; echo -n "URL shd have copied, URL is: "; cat $tmpfile ; echo; rm -f $tmpfile; }

# find and terminate processes
# FIND PROCESS
function p(){
        ps aux | grep -i $1 | grep -v grep
}
function ka(){
    cnt=$( p $1 | wc -l)  # total count of processes found
    klevel=${2:-15}       # kill level, defaults to 15 if argument 2 is empty
    echo -e "\nSearching for '$1' — Found" $cnt "Running Processes .. "
    p $1
    echo -e '\nTerminating' $cnt 'processes .. '
    ps aux  |  grep -i $1 |  grep -v grep   | awk '{print $2}' | xargs sudo kill -9
    echo -e "Done!\n"
    echo "Running search again:"
    p "$1"
    echo -e "\n"
}


## extract-and-delete all

# configure a default mount server. invoke `mnt` will mount this server
DEFAULT=cs2:
# prefix to be applied to the mount point. see MOUNT_POINT below
MOUNT_POINT_PREFIX=
# where to put the mounting folder? This is /Volumes on Mac OS X
if [[ `uname` == 'Darwin' ]]; then
MOUNT_POINT_HOME=/Volumes
else
MOUNT_POINT_HOME=/mnt
fi

function sshfs-mnt {
	if [ $# == 0 ]
	then
		NODE=$DEFAULT
	else
		NODE=$1
	fi
	# is hostname fully qualified?
	if [ ${NODE%%.*} == $NODE ]
	then
		VOL=${NODE%:}
	else
		VOL=${NODE%%.*}
	fi
	# remove username if present
	VOL=${VOL#*@}
	# removing trailing slash
	NODE=${NODE%/}
	# is slash in $NODE? (are we mounting a non-default folder?)
	if [ "${NODE#*/}" == "$NODE" ]
	then
		# no slash. set the folder
		# making sure NODE ends with colon
		if [ "${NODE%:}" == "$NODE" ]
		then
			NODE=$NODE:
		fi
	else
		# use the folder name as volumn name
		VOL=${NODE##*/}
		# also making sure colon is present
		HOST=${NODE%%/*}
		NODE=${HOST%:}:/${NODE#*/}
	fi

	MOUNT_POINT=$MOUNT_POINT_HOME/$MOUNT_POINT_PREFIX$VOL
	echo "mounting $NODE on $MOUNT_POINT..."

	if ! (stat $MOUNT_POINT 2>/dev/null | grep staff &> /dev/null)
	then
		mkdir -p $MOUNT_POINT
		sshfs $NODE $MOUNT_POINT 2>&1 | grep -v 'nodelay'
	fi

	if [[ `uname` == 'Darwin' ]]; then
	open $MOUNT_POINT
	fi

}


# function for .bashrc to facilitate (extraction of archive|archiving of file)
# extract based on the file extension.
function extractrm(){
	if [ -f $1 ] ; then
		case $1 in
		  *.tar.bz2)   tar xvjf $1 && rm $1    ;;
			*.tar.gz)    tar xvzf $1 && rm $1     ;;
			*.bz2)       bunzip2 $1 && rm $1      ;;
			*.rar)       unrar x $1  && rm $1     ;;
			*.gz)        gunzip $1  && rm $1      ;;
			*.tar)       tar xvf $1  && rm $1     ;;
			*.tbz2)      tar xvjf $1  && rm $1    ;;
			*.tgz)       tar xvzf $1   && rm $1   ;;
			*.zip)       unzip $1  && rm $1       ;;
			*.Z)         uncompress $1  && rm $1  ;;
			*.7z)        7z x $1   && rm $1       ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi

}

function extract(){
	if [ -f $1 ] ; then
		case $1 in
		  *.tar.bz2)   tar xvjf $1     ;;
			*.tar.gz)    tar xvzf $1     ;;
			*.bz2)       bunzip2 $1      ;;
			*.rar)       unrar x $1      ;;
			*.gz)        gunzip $1       ;;
			*.tar)       tar xvf $1      ;;
			*.tbz2)      tar xvjf $1     ;;
			*.tgz)       tar xvzf $1     ;;
			*.zip)       unzip $1        ;;
			*.Z)         uncompress $1   ;;
			*.7z)        7z x $1         ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

# creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "$(basename $1).tar.gz"  "${1%%/}/"; echo "File is now available: " "$(basename $1).tar.gz" ; }

# create a ZIP archive of a file or folder.
function makezip() { zip -r "$(basename $1).zip" "$1"; echo "File is now available: " "$(basename $1).zip" ; }
